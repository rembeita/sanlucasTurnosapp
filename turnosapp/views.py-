from django.shortcuts import render


# Create your views here.

from django.http import HttpResponse
from django.template import RequestContext, loader
from django.views.generic import RedirectView

from .models import Chc
from .models import Turnos
from .models import Dres
from .models import Espec

from django.core.urlresolvers import reverse
from django.http import HttpResponseRedirect


def index(request):
	template = loader.get_template('turnosapp/index.html')
	STATIC_URL_ROD = '/static/'
	context = locals()
	context['STATIC_URL_ROD'] = STATIC_URL_ROD

#	context_instance = RequestContext(request)
	return render(request, 'turnosapp/index.html', context)

def validaringreso(request):
	if request.method == 'POST':
		formvar = request.POST
		documentovalue = str(formvar['documento'])
		telefonovalue = str(formvar['telefono'])
	chc_info = Chc.objects.all().filter(nro_doc = documentovalue)
	chc_info = chc_info.filter(tele = telefonovalue)
	dicmedicos = {}

	context = locals()

	if not chc_info:
		print "NOvalido"
		mensaje = "Paciente NO registrado o Clave Incorrecta."
		mensaje2 = "Solicite turno telefonicamente."
		context['MENSAJE'] = mensaje
		context['MENSAJE2'] = mensaje2
		return render(request, 'turnosapp/novalidaingreso.html', context)

	nombrepaciente = str(chc_info.values("acciden")[0]["acciden"])
	idpaciente = str(chc_info.values("id")[0]["id"])
#	print idpaciente
	context['ACCIDEN'] = nombrepaciente
	
	turnos_info = Turnos.objects.all().filter(id_chc = idpaciente)
#	turnos_info = chc_info.filter(tele = telefonovalue)
	sqlmedicos = turnos_info.values("nro_doc")

	medicosxpaciente = []
	medicotmp = []
	medicotmp.append(sqlmedicos[0]["nro_doc"])
#	for i in sqlmedicos:
#	dicmedicos[sqlmedicos[0]["nro_doc"]] = ""
#	dicmedicos['12'] = ""
#	dicmedicos['14'] = ""
#	print dicmedicos
	medicosxpaciente.append(sqlmedicos[0]["nro_doc"])
	dicmedicotmp = {}

	for i in medicosxpaciente:
		j = "12"
		doctores_info = Dres.objects.all().filter(cod_med = "  " + j)
		medicotmp.append(str(doctores_info.values("nombre")[0]["nombre"]))
		medicotmp.append(str(doctores_info.values("cod_esp")[0]["cod_esp"]))
#		print medicotmp[2]
#		obtener_especialidad = Espec.objects.all().values("cod_esp")
		obtener_especialidad = Espec.objects.all().filter(cod_esp = str(" "+ medicotmp[2])).values("nom_esp")[0]["nom_esp"]
#		print obtener_especialidad
		medicotmp.append(str(obtener_especialidad))
		dicmedicotmp[i]= medicotmp

	context["DICMEDICOTMP"] = dicmedicotmp

	print "LISTMEDICOOOO"
	print medicotmp
	print "DICMEDICOOOO"
	print dicmedicotmp
	return render(request, 'turnosapp/validaingreso.html', context)

def elegirturno(request):

	if request.method == 'POST':
		formvar = request.POST
		returnvalue = str(formvar['return'])
		medicoeleccionvalue = str(formvar['medicoeleccion'])
		nombrepacientevalue = str(formvar['nombrepaciente'])

	listmedicoinfo = medicoeleccionvalue.split("||")

	print listmedicoinfo

	if returnvalue == "Salir":
                return HttpResponseRedirect('/turnosapp/')


	context = locals()
	context["NOMBREPACIENTE"] = nombrepacientevalue
	context["NOMBREDOCTOR"] = listmedicoinfo[0]
	context["NOMBREESPECIALIDAD"] = listmedicoinfo[1]

	return render(request, 'turnosapp/seleccionturno.html', context)


################################
import time
from django.contrib.auth.decorators import login_required
from django.http import HttpResponseRedirect, HttpResponse
from django.shortcuts import get_object_or_404, render_to_response

#from dbe.cal.models import *
from .models import Entry

#mnames = "January February March April May June July August September October November December"
mnames = "Enero Febrero Marzo Abril Mayo Junio Julio Agosto Septiembre Octubre Noviembre Diciembre"
mnames = mnames.split()


#@login_required
def main_calendar(request, year=None):
    """Main listing, years and months; three years per page."""
    # prev / next years
    if year: year = int(year)
    else:    year = time.localtime()[0]

    nowy, nowm = time.localtime()[:2]
    lst = []

    # create a list of months for each year, indicating ones that contain entries and current
    for y in [year, year+1, year+2]:
        mlst = []
        for n, month in enumerate(mnames):
            entry = current = False   # are there entry(s) for this month; current month?
            entries = Entry.objects.filter(date__year=y, date__month=n+1)

            if entries:
                entry = True
            if y == nowy and n+1 == nowm:
                current = True
            mlst.append(dict(n=n+1, name=month, entry=entry, current=current))
        lst.append((y, mlst))
    context = locals()
    context["years"] = lst
#    context["user"] = listmedicoinfo[1]

#    return render_to_response("turnosapp/maincalendar.html", dict(years=lst, user=request.user, year=year, reminders=reminders(request)))
    return render(request, 'turnosapp/maincalendar.html', context)


